.\"
.\" Copyright (c) 2012 Eric Radman <ericshane@eradman.com>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd November 13, 2019
.Dt ENTR 1
.Os
.Sh NAME
.Nm entr
.Nd run arbitrary commands when files change
.Sh SYNOPSIS
.Nm
.Op Fl acdprs
.Ar utility
.Op Ar argument /_ ...
.Sh DESCRIPTION
The
.Nm
utility reads a list of files from standard input and executes
.Ar utility
using the supplied
.Ar argument Ns s
if any of the files change.
.Nm
waits for the child process to finish before responding to subsequent file
system events.
A TTY is also opened before entering the watch loop in order to support
interactive utilities.
.Pp
The arguments are as follows:
.Bl -tag -width Ds
.It Fl a
Respond to all events which occur while
.Ar utility
is running.
Without this option,
.Nm
consolidates events in order to avoid looping.
Has no effect when used with
.Fl r .
.It Fl c
Run
.Pa /usr/bin/clear
before executing
.Ar utility .
.It Fl d
Track the directories of regular files provided and exit if a new file is added.
Enables directories to be specified explicitly.
Filenames beginning with
.Ql \&.
are ignored.
.It Fl n
Run in non-interactive mode;
will not attempt to read from the TTY or change its properties.
.It Fl p
Postpone the first execution of
.Ar utility
until a file is modified.
.It Fl r
Reload a persistent child process.
As with the standard mode of operation, a
.Ar utility
which terminates is not executed again until a file system or keyboard event is
processed.
.Dv SIGTERM
is used to terminate the
.Ar utility
before it is restarted.
A process group is created to prevent shell scripts from masking signals.
.Nm
waits for the
.Ar utility
to exit to ensure that resources such as sockets have been closed.
Control of the TTY is not transferred to the child process.
.It Fl s
Evaluate the first argument using the interpreter specified by
.Ev SHELL .
If standard output is a TTY, the name of the interpreter and exit code is
printed after each invocation.
.El
.Pp
The first argument named
.Dq Ar /_
is replaced with the absolute path of the first file to trigger an event.
The first file under watch is used as the default.
If the
.Fl s
option is used, the name of the first file to trigger an event can be read from
.Va $0 .
.Ss Commands
.Nm
listens for keyboard input and responds to the following commands:
.Bl -tag -width <space>
.It Aq Cm space
Execute
.Ar utility
immediately.
If the
.Fl r
option is set this will terminate and restart the child process as if a file
change event had occurred.
.It Cm q
Quit
.Nm .
Equivalent to pressing
.Aq Cm control-c
or sending
.Dv SIGINT .
.El
.Sh ENVIRONMENT
.Bl -tag -width PAGER
.It Ev PAGER
If undefined,
.Nm
assigns it to
.Pa /bin/cat .
This prevents interactive utilities from waiting for
keyboard input if output does not fit on the screen.
.It Ev PAGER
Execute
.Ar utility
with the current shell.
If undefined,
.Nm
assigns it to
.Pa /bin/sh .
.El
.Sh EXIT STATUS
The
.Nm
utility exits with one of the following values:
.Pp
.Bl -tag -width 2n -offset indent -compact
.It 0
.Dv SIGINT
or
.Dv SIGTERM
was received.
.It 1
No regular files were provided as input or an error occurred.
.It 2
A file was added to a directory and the directory watch option was specified.
.El
.Sh EXAMPLES
Rebuild a project if source files change, limiting output to the first 20 lines:
.Pp
.Dl $ find src/ | entr -s 'make | sed 20q'
.Pp
Launch and auto-reload a node.js server:
.Pp
.Dl $ ls *.js | entr -r node app.js
.Pp
Launch and auto-reload a node.js server as a background task:
.Pp
.Dl $ (ls *.js | entr -r node app.js &)
.Pp
Clear the screen and run a query after the SQL script is updated:
.Pp
.Dl $ echo my.sql | entr -p psql -f /_
.Pp
Rebuild project if a source file is modified or added to the src/ directory:
.Pp
.Dl $ while true; do ls src/*.rb | entr -d make; done
